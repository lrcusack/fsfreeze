/**
 * This creates a character device for communication between the 
 * 		kernel and userspace
 */

#include "chardev.h"
#include <linux/module.h>
/*#define MODULE
#define _KERNEL_
#define	EXPORT_SYMTAB*/
/* Globals localized to file (by use of static */


static int Major;		/* assigned to device driver */
static char msg[BUF_LEN];	/* a stored message */
wait_queue_head_t wq;
int condition;
extern void (*freezer)(struct file *, char);
static kqueue* fname_queue;

//EXPORT_SYMBOL(freezer);

static struct file_operations fops = {
	.read = device_read,
	.write = device_write,
	.open = device_open,
	.release = device_release
};

static int device_open(struct inode *inode, struct file *file)
{
	try_module_get(THIS_MODULE);

	return 0;
}

static int device_release(struct inode *inode, struct file *file)
{
	module_put(THIS_MODULE);
	return 0;
}

/* Called when a process writes to dev file: echo "hi" > /dev/hello */
static ssize_t device_write(struct file *filp, const char *buff,
			    size_t len, loff_t * off)
{
	int copy_len = len > BUF_LEN ? BUF_LEN : len;
	unsigned long amnt_copied = 0;
	printk("***** i'm allup innat device write, yup yup \n");
	/* NOTE: copy_from_user returns the amount of bytes _not_ copied */
	amnt_copied = copy_from_user(msg, buff, copy_len);
	if (copy_len == amnt_copied)
		return -EINVAL;
		
	// wake up processes on the wait_queue after the userspace
	// helper has finished reading the information from
	// the chardev and made a clean copy of the file being
	// modified
	condition = 1;
	// incompatible argument
	//printk("***** just before wake_up_interruptible \n");
	wake_up_interruptible(&wq);
	//printk("***** made it past wake_up_interruptible without locking \n");
	
	//condition = 0;
	return copy_len - amnt_copied;
}

static ssize_t device_read(struct file *filp, char *buffer, size_t len,
			   loff_t * offset)
{
	// update to match new
	
	unsigned long amnt_copied;
	int amnt_left = BUF_LEN - *offset;
	char *copy_position = msg + *offset;
	int copy_len = len > amnt_left ? amnt_left : len;
	//printk("***** device_read is in biniss \n");
	//are we at the end of the buffer?
	char *fname = kq_dequeue(fname_queue);
	if (fname == NULL) return 0;
	sprintf(buffer,"%s", fname);
	return strlen(buffer);
	/*
	if (amnt_left <= 0)
		return 0;

	// NOTE: copy_to_user returns the amount of bytes _not_ copied
	amnt_copied = copy_to_user(buffer, copy_position, copy_len);
	if (copy_len == amnt_copied)
		return -EINVAL;

	// adjust the offset for this process
	*offset += copy_len;

	return copy_len - amnt_copied;*/
}


void freezerfct(struct file* fp, char type){
	
	char* temp = NULL;
	
	kstack* path_stack = ks_create();
	
	struct dentry* thisdentry = fp->f_dentry;
	
	// if the root is not "/" ignore them
	if(strcmp((const char*) thisdentry->d_sb->s_root->d_name.name, (const char*) "/")) return;
	
	//if the file name is "1" ignore them
	if(!strcmp((const char*) thisdentry->d_name.name, (const char*) "1")) return;
	
	// if the 
	if(!strcmp((const char*) thisdentry->d_name.name, (const char*) "pmtx")) return;
	
		while(strcmp((const char*) thisdentry->d_name.name, (const char*) "/")){
			temp = (char*) kmalloc((strlen((const char*)thisdentry->d_name.name)+1)*sizeof(char),GFP_KERNEL);
			sprintf(temp, "%s", thisdentry->d_name.name);
			ks_push(path_stack, (void*) temp);
			//printk("%s\n", temp);
			thisdentry = dget(thisdentry->d_parent);
		}
		
		// this is above first while loop in Liam's version
		char* fname_buf = (char*) kmalloc(sizeof(char)*PATH_MAX, GFP_KERNEL);
		
		// still duplicate while loop in Liam's latest push
		//printk("***** moving along \n");
		
		// print top level directory	
		//printk("***** %s\n", temp);
		
		// always just gets to here and returns, nothing below this is tested because we have not tried writing to files in our protected directory
		if (strcmp (((const char*) FREEZEDIRNAME), ((const char*) temp))){
			return;
		}
		
		condition = 0;
		memset (fname_buf, 0, sizeof(char)*PATH_MAX);
		printk("before stack popping loop \n");
		while (( temp = ks_pop(path_stack)) != NULL){
			printk("***** in the stack popping loop. \n");
			fname_buf = strcat(fname_buf, (const char*) "/");
			fname_buf = strcat(fname_buf, (const char*) temp);
			printk("%s \n", fname_buf);
			printk("%s \n", temp);
			kfree(temp);
		}
		
		ks_delete(path_stack);
		
		char* logstring = kmalloc(sizeof(char)*(strlen(fname_buf)+4), GFP_KERNEL);
		sprintf(logstring, (const char*) LOG_FORMAT, type, fname_buf);
		kfree(fname_buf);
		printk("logged %s \n", logstring);
		
		kq_enqueue(fname_queue, logstring);
		
		printk("***** putting something on the wait queue \n");
		wait_event_interruptible(wq, condition != 0);
		printk("***** process successfully taken off the wait queue \n");
		
		
		
	// add the process calling sys_write to the wait_queue
	// when freezerfct is called and condition = 0
	//printk("***** made it into the freezerfct \n");
	//printk("***** char param = %c \n", a);
	//printk("*****a process has been added to the wait_queue \n");
	
	//printk("*****process woken up, wake_up call not required \n");
	
	
	
	return;
}

int init_module(void)
{
	Major = register_chrdev(0, DEVICE_NAME, &fops);
	
	// initialize the wait_queue, print statement for debugging
	//incompatible argument
	fname_queue = kq_create();
	printk("***** kqueue has been created \n");
	init_waitqueue_head(&wq);
	printk("***** wait queue initialized \n");
	//printk("*****wait_queue has been initialized \n");
	printk("***** device all initialized n wutevuh \n");
	if (Major < 0) {
		printk(KERN_ALERT "Failed to register char device.\n");
		return Major;
	}

	memset(msg, '+', BUF_LEN);
	printk(KERN_INFO "chardev is assigned to major number %d.\n",
	       Major);
	       
	freezer = &freezerfct;

	return 0;
}
void cleanup_module(void)
{
	freezer = NULL;
	int ret = unregister_chrdev(Major, DEVICE_NAME);
	if (ret < 0)
		printk(KERN_ALERT "Error in unregister_chrdev: %d\n", ret);
	return;
}
MODULE_LICENSE("GPL");
